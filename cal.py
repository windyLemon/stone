import torch


def kl(mean, var, anchor_mean, anchor_var):
    kl = torch.zeros((5, ))
    # print(mean.shape, var.shape, anchor_mean.shape, anchor_var.shape)
    for i in range(64):
        kl += torch.log(anchor_var[i] / var[:, i]) - (anchor_var[i] / var[:, i]) - ((anchor_mean[i] - mean[:, i])) ** 2 / var[:, i] + 1
    return kl * -0.5

a0 = torch.tensor([ 0.5964, -0.0467,  0.2351,  0.2306,  0.0649,  0.5425,  0.6976, -0.4889,  0.3827,  0.0632, -0.1017, -0.6685,  0.0302, -0.1874,  0.1946,  0.2040,  0.2457,  0.0460, -0.6979, -0.7960, -0.2867,  0.2391,  0.6928,  0.2428, -0.7050, -0.1695,  0.2303,  0.2387,  0.3934,  0.7439, -0.1377, -0.2971, -0.7263,  0.3255, -0.5214,  0.1197, -0.0820, -0.8146, -0.7871,  0.2596,  0.1200,  0.4000,  0.1164, -0.3662,  0.0870,  0.1820,  0.0535, -0.1330,  0.3328,  0.0789, -0.2226,  0.0887,  0.1557,  0.1328,  0.0920,  0.1769, -1.1325,  0.4807, -0.0451, -0.2097,  0.2510, -0.1456, -0.0473,  0.3442])
b0 = torch.tensor([0.6156, 0.2839, 0.5154, 0.3961, 0.5333, 0.3344, 0.5754, 0.5681, 0.3982, 0.3805, 0.7098, 0.5469, 0.3444, 0.3140, 0.4809, 0.3867, 0.3070, 0.4509, 0.4588, 0.4793, 0.3184, 0.3671, 0.5476, 0.4120, 0.4753, 0.5259, 0.3099, 0.4241, 0.5020, 0.4979, 0.3718, 0.3838, 0.4061, 0.3561, 0.5447, 0.3564, 0.3234, 0.4477, 0.4295, 0.4688, 0.3923, 0.5036, 0.4557, 0.5197, 0.5359, 0.4392, 0.5415, 0.3520, 0.5252, 0.4367, 0.4890, 0.4886, 0.4421, 0.4298, 0.4133, 0.4966, 0.5450, 0.5407, 0.4388, 0.3831, 0.5469, 0.4062, 0.4169, 0.4096])

a1 = torch.tensor([ 0.2169,  0.0101, -0.4919,  0.0236, -0.4775,  0.3296,  0.1546,  0.1919,  0.1470,  0.0369,  0.1304, -1.0531, -0.1541, -0.4492, -0.3941,  0.1936,  0.5905,  0.0025, -0.7568, -0.1281,  0.3059,  0.0925,  0.0300, -0.3830, -1.8714, -1.6173,  0.6660,  0.1622,  0.1101, -0.1412, -0.0487, -0.1490, -0.5137,  0.7639, -0.0739,  0.2979,  0.3716, -0.6523, -0.6947, -0.4843,  0.5463,  0.2460,  0.0537, -0.0210, -0.5729,  0.0628, -1.2257,  0.3562,  0.0325,  0.0286,  0.2745,  0.5575,  0.1296, -0.1681, -0.0342,  0.2193, -1.2625, -0.1778,  0.0448, -0.3419, -0.6953, -0.0630,  0.4998,  0.9650])
b1 = torch.tensor([0.6064, 0.2210, 0.5617, 0.4368, 0.4725, 0.2863, 0.4872, 0.5454, 0.3266, 0.4148, 0.5452, 0.3237, 0.2837, 0.4422, 0.4020, 0.4293, 0.3271, 0.3417, 0.4122, 0.3575, 0.3425, 0.4223, 0.5849, 0.5767, 0.4885, 0.4359, 0.3349, 0.3210, 0.4580, 0.4000, 0.4271, 0.4591, 0.3439, 0.3628, 0.4086, 0.4418, 0.3650, 0.5462, 0.3729, 0.5575, 0.4843, 0.4046, 0.3622, 0.3990, 0.5154, 0.3893, 0.5594, 0.3621, 0.3857, 0.3996, 0.3852, 0.5355, 0.4227, 0.5549, 0.4621, 0.4690, 0.4937, 0.2955, 0.5306, 0.3033, 0.4489, 0.3237, 0.3964, 0.4948])


a2 = torch.tensor([ 0.5642,  0.0448,  0.0951,  0.2490, -0.8170, -0.3527,  0.1762, -0.0998, -0.7506, -0.1560,  0.3545, -0.8136,  0.2424,  0.0304, -0.7004,  0.3052, -0.5737,  0.0943, -0.2179, -0.4873, -0.2421,  0.1756,  0.4719,  0.4861, -0.6751, -0.7551,  0.6067, -0.6154,  0.4545,  0.5212,  0.1891, -0.5699, -0.5273, -0.0523, -0.3203,  0.3330,  0.5062,  0.0797, -0.2457, -0.2992,  0.4904,  0.1716,  0.1835,  0.1403,  0.1820,  0.4981, -0.9055,  0.4605,  0.2715,  0.4198, -0.7834, -0.1525,  0.0366, -0.4739,  0.1509,  0.0497, -0.8144,  0.2582, -0.0017, -0.4690,  0.1741, -0.6894, -0.4222,  0.4936])
b2 = torch.tensor([0.4697, 0.3947, 0.5093, 0.4849, 0.5500, 0.4272, 0.4240, 0.5324, 0.4549, 0.4294, 0.3376, 0.5459, 0.3071, 0.5544, 0.5905, 0.3321, 0.4282, 0.5864, 0.3939, 0.3882, 0.7035, 0.4740, 0.3512, 0.5914, 0.7386, 0.5998, 0.3255, 0.5933, 0.5051, 0.5424, 0.3643, 0.7218, 0.4578, 0.3358, 0.4595, 0.5101, 0.4460, 0.5877, 0.4174, 0.6583, 0.5439, 0.3136, 0.5081, 0.4821, 0.4704, 0.5176, 0.5897, 0.4823, 0.4476, 0.5310, 0.6440, 0.3827, 0.4427, 0.5203, 0.3463, 0.3437, 0.4362, 0.2812, 0.2706, 0.6031, 0.4535, 0.4342, 0.5008, 0.4027])

a3 = torch.tensor([ 0.0859,  0.0471, -0.0959, -0.0635,  0.2021,  0.2206,  0.0881,  0.1215,  0.2293,  0.1662,  0.4340, -0.5386,  0.1434, -0.4578, -0.1495, -0.0289,  0.2099,  0.2526, -0.6826,  0.1515, -0.0557, -0.2400,  0.8353,  0.1716, -0.2539, -0.5473,  0.0075,  0.2958,  0.5532,  0.1602,  0.0409, -0.1471, -0.2900,  0.2088, -0.3280, -0.4332, -0.4058, -0.8372,  0.2192,  0.5398, -0.0234,  0.6045, -1.2724, -0.0824,  0.2307,  0.0787,  0.4792, -0.2869,  0.0574,  0.1608,  0.2532, -0.3470,  0.2176,  0.1264,  0.4824,  0.0503, -0.8362,  0.0616,  0.2828, -0.4866,  0.2591,  0.0808,  0.0589,  0.5827])
b3 = torch.tensor([0.3882, 0.3076, 0.3777, 0.4031, 0.3952, 0.3245, 0.3384, 0.2983, 0.4402, 0.2878, 0.4182, 0.3349, 0.4973, 0.3926, 0.2891, 0.4473, 0.6026, 0.3175, 0.5720, 0.3770, 0.2619, 0.3700, 0.5949, 0.5058, 0.6963, 0.5802, 0.4245, 0.5187, 0.6494, 0.4617, 0.3905, 0.3925, 0.4127, 0.2139, 0.4393, 0.3094, 0.3423, 0.6312, 0.5764, 0.6491, 0.3521, 0.5616, 0.3906, 0.5094, 0.3187, 0.4925, 0.3517, 0.3462, 0.2814, 0.3060, 0.3647, 0.5675, 0.3385, 0.6175, 0.4212, 0.4950, 0.7011, 0.2491, 0.4480, 0.3593, 0.3786, 0.4683, 0.3250, 0.5443])

a4 = torch.tensor([ 0.4576,  0.3050,  0.3012,  0.4222,  0.4845,  0.1774,  0.1397, -0.1240,  0.1782,  0.1804,  0.3511, -0.2387, -0.4407, -0.5091,  0.3588,  0.3895, -0.0121,  0.4433, -1.0032, -0.5177,  0.0540,  0.0806,  0.6968,  0.3164,  0.2861, -0.3923,  0.1475,  0.0426,  0.7093,  0.7504,  0.3217, -0.1301, -0.5390,  0.3152, -0.2916,  0.2894, -0.7136, -1.3623, -0.7087,  0.2456,  0.3281,  0.5030, -0.6251,  0.1097, -0.3384,  0.2803,  0.2258,  0.2521,  0.3588,  0.1140,  0.1038,  0.1082, -0.7433, -0.6958,  0.4322,  0.1365, -0.8152,  0.0382,  0.4919, -0.6420,  0.1582, -0.1075,  0.0293,  0.4642])
b4 = torch.tensor([0.4258, 0.2711, 0.3983, 0.4296, 0.4339, 0.3236, 0.3776, 0.3543, 0.4737, 0.2804, 0.5226, 0.3612, 0.5019, 0.4036, 0.3203, 0.5027, 0.6365, 0.3258, 0.5991, 0.4105, 0.2631, 0.3845, 0.6161, 0.5282, 0.6493, 0.6095, 0.4303, 0.5209, 0.6690, 0.5293, 0.4241, 0.3966, 0.3820, 0.2284, 0.5353, 0.3389, 0.3673, 0.6821, 0.6715, 0.7911, 0.4001, 0.6030, 0.3916, 0.4798, 0.4248, 0.4513, 0.4491, 0.3666, 0.3014, 0.2887, 0.4227, 0.5453, 0.4350, 0.6621, 0.4175, 0.4911, 0.7411, 0.2332, 0.3886, 0.4315, 0.3783, 0.4700, 0.4187, 0.5630])



cala = torch.stack([a0, a1, a2, a3, a4], dim=0)
calb = torch.stack([b0, b1, b2, b3, b4], dim=0)

# cos_mean = torch.nn.functional.cosine_similarity(anchor_mean[None, :], cala)
# cos_var = torch.nn.functional.cosine_similarity(anchor_var[None, :] ** 2, calb ** 2)

print(kl(cala, calb ** 2, a4, b4 ** 2))

# print(cos_mean)
# print(cos_var)
# print(anchor_mean.shape, anchor_var.shape)
# print(cala.shape, calb.shape)